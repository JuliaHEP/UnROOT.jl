using UnROOT: rnt_write, RNTupleFrame, ClusterSummary, PageDescription, Write_RNTupleListFrame, RBlob, Stubs
using XXHashNative: xxh3_64
using Tables: columntable
using Random

const WRITE_TIME_ary = Stubs.WRITE_TIME_ary

const REFERENCE_BYTES = read(joinpath(@__DIR__, "../samples/RNTuple/test_ntuple_minimal.root"))

function test_io(obj, expected; kw...)
    a = IOBuffer()
    rnt_write(a, obj; kw...)
    ours = take!(a)
    if (ours == expected)
        @test true
    else
        println("Expected: ", expected)
        println("Got:      ", ours)
        @test false
    end
end

@testset "RNTuple Writing - Internal" begin

dummy_FileHeader = [
    0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x06, 0x38, 0x00, 0x00, 0x05, 0xf9, 0x00, 0x00, 0x00, 0x3f,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
    0x65, 0x00, 0x00, 0x01, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]
test_io(UnROOT.Stubs.fileheader, dummy_FileHeader)

dummy_tkey32_tfile = [
    0x00, 0x00, 0x00, 0x90, 0x00, 0x04, 0x00, 0x00, 0x00, 0x56, WRITE_TIME_ary...,  0x00, 0x3A,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x05, 0x54, 0x46, 0x69, 0x6C, 0x65,
    0x18, 0x74, 0x65, 0x73, 0x74, 0x5F, 0x6E, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x5F, 0x6D, 0x69, 0x6E,
    0x69, 0x6D, 0x61, 0x6C, 0x2E, 0x72, 0x6F, 0x6F, 0x74, 0x00,
]
test_io(UnROOT.Stubs.tkey32_tfile, dummy_tkey32_tfile)

dummy_tfile = [
    0x18, 0x74, 0x65, 0x73, 0x74, 0x5F, 0x6E, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x5F, 0x6D, 0x69, 0x6E,
    0x69, 0x6D, 0x61, 0x6C, 0x2E, 0x72, 0x6F, 0x6F, 0x74, 0x00,
]
test_io(UnROOT.Stubs.tfile, dummy_tfile)

dummy_tdirectory32 = [
    0x00, 0x05, WRITE_TIME_ary..., WRITE_TIME_ary...,0x00, 0x00, 0x00, 0x79, 0x00, 0x00,
    0x00, 0x54, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC,
]
test_io(UnROOT.Stubs.tdirectory32, dummy_tdirectory32)

dummy_padding2 = [
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

dummy_RBlob1 = [
    0x00, 0x00, 0x00, 0xDC, 0x00, 0x04, 0x00, 0x00, 0x00, 0xBA, WRITE_TIME_ary..., 0x00, 0x22,
    0x00, 0x01, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x64, 0x05, 0x52, 0x42, 0x6C, 0x6F, 0x62,
    0x00, 0x00,
]
test_io(UnROOT.Stubs.RBlob1, dummy_RBlob1)

# ==================================== side tests begin ====================================
    
field_record = UnROOT.FieldRecord(zero(UInt32), zero(UInt32), zero(UInt32), zero(UInt16), zero(UInt16), 0, -1, -1, "one_uint", "std::uint32_t", "", "")
dummy_field_record = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x08, 0x00, 0x00, 0x00, 0x6F, 0x6E, 0x65, 0x5F, 0x75, 0x69, 0x6E, 0x74, 0x0D, 0x00, 0x00, 0x00, 
    0x73, 0x74, 0x64, 0x3A, 0x3A, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x5F, 0x74, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 
]
test_io(field_record, dummy_field_record)

column_record = UnROOT.ColumnRecord(0x14, 0x20, zero(UInt32), 0x00, 0x00, 0)
dummy_column_record = [0x14, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
test_io(column_record, dummy_column_record)

envelope_frame_field_record = Write_RNTupleListFrame([field_record])
dummy_envelope_frame_field_record = [
    0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x6F, 0x6E, 0x65, 0x5F, 0x75, 0x69, 0x6E, 0x74, 
    0x0D, 0x00, 0x00, 0x00, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x5F, 
    0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
]
test_io(envelope_frame_field_record, dummy_envelope_frame_field_record)

dummy_rnt_header_payload = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x6D, 0x79, 0x6E, 0x74, 
    0x75, 0x70, 0x6C, 0x65, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x52, 0x4F, 0x4F, 0x54, 
    0x20, 0x76, 0x36, 0x2E, 0x33, 0x33, 0x2E, 0x30, 0x31, 0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0x01, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 
    0x00, 0x6F, 0x6E, 0x65, 0x5F, 0x75, 0x69, 0x6E, 0x74, 0x0D, 0x00, 0x00, 0x00, 0x73, 0x74, 0x64, 
    0x3A, 0x3A, 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x5F, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xF4, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 
]
test_io(UnROOT.Stubs.rnt_header, dummy_rnt_header_payload; envelope=false)

# ==================================== side tests end ====================================

dummy_rnt_header = [0x01, 0x00, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, dummy_rnt_header_payload..., 0x28, 0x7E, 0xC6, 0x09, 0xC0, 0x59, 0xEC, 0x3D]
test_io(UnROOT.Stubs.rnt_header, dummy_rnt_header; envelope=true)

dummy_RBlob2 = [
    0x00, 0x00, 0x00, 0x2E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, WRITE_TIME_ary...,         0x00, 0x22,
    0x00, 0x01, 0x00, 0x00, 0x01, 0xD0, 0x00, 0x00, 0x00, 0x64, 0x05, 0x52, 0x42, 0x6C, 0x6F, 0x62,
    0x00, 0x00,
]
test_io(UnROOT.Stubs.RBlob2, dummy_RBlob2)

dummy_RBlob3 = [
    0x00, 0x00, 0x00, 0x9E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7C, WRITE_TIME_ary...,         0x00, 0x22,
    0x00, 0x01, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x64, 0x05, 0x52, 0x42, 0x6C, 0x6F, 0x62,
    0x00, 0x00,
]
test_io(UnROOT.Stubs.RBlob3, dummy_RBlob3)

# ================= side tests begin =================
dummy_cluster_summary = [
    0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 
]
test_io(UnROOT.Stubs.cluster_summary, dummy_cluster_summary)

# > https://github.com/root-project/root/blob/1a854602e42d4493f56a26e35e19bdf23b7d0933/tree/ntuple/v7/doc/specifications.md?plain=1#L672
# > The inner list is followed by a 64bit unsigned integer element offset and the 32bit compression settings
dummy_inner_list_frame = [
    0xD8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
    0x04, 0x00, 0x00, 0x00, 0xF2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
]

inner_list_frame = UnROOT.RNTuplePageInnerList([
    PageDescription(0x00000001, UnROOT.Locator(4, 0x00000000000001f2, )),
])
test_io(inner_list_frame, dummy_inner_list_frame)

dummy_pagelink_noenvelope = [
    0x28, 0x7E, 0xC6, 0x09, 0xC0, 0x59, 0xEC, 0x3D,
    0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,
    0xCC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, dummy_inner_list_frame...]
test_io(UnROOT.Stubs.pagelink, dummy_pagelink_noenvelope; envelope=false)
# ================= side tests end =================


dummy_pagelink = [0x03, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, dummy_pagelink_noenvelope...]
dummy_pagelink = [dummy_pagelink; reinterpret(UInt8, [xxh3_64(dummy_pagelink)])]
test_io(UnROOT.Stubs.pagelink, dummy_pagelink)

dummy_RBlob4 = [
    0x00, 0x00, 0x00, 0xC2, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA0, WRITE_TIME_ary...,         0x00, 0x22,
    0x00, 0x01, 0x00, 0x00, 0x02, 0x9C, 0x00, 0x00, 0x00, 0x64, 0x05, 0x52, 0x42, 0x6C, 0x6F, 0x62,
    0x00, 0x00,
]
test_io(UnROOT.Stubs.RBlob4, dummy_RBlob4)

dummy_rnt_footer = [
    0x02, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x28, 0x7E, 0xC6, 0x09, 0xC0, 0x59, 0xEC, 0x3D, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xF4, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
    0x00, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xC4, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 
    0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x73, 0x96, 0x9F, 0x52, 0x72, 
    0x24, 0x18, 
]
test_io(UnROOT.Stubs.rnt_footer, dummy_rnt_footer)

dummy_tkey32_anchor = [
    0x00, 0x00, 0x00, 0x8E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x4E, WRITE_TIME_ary...,         0x00, 0x40,
    0x00, 0x01, 0x00, 0x00, 0x03, 0x5E, 0x00, 0x00, 0x00, 0x64, 0x1B, 0x52, 0x4F, 0x4F, 0x54, 0x3A,
    0x3A, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6D, 0x65, 0x6E, 0x74, 0x61, 0x6C, 0x3A, 0x3A, 0x52,
    0x4E, 0x54, 0x75, 0x70, 0x6C, 0x65, 0x08, 0x6D, 0x79, 0x6E, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x00,
]

dummy_rnt_anchor = [
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x16, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
    0x53, 0x5E, 0xC4, 0x57, 0xE7, 0x3C, 0x95, 0xEF, 
]
test_io(UnROOT.Stubs.rnt_anchor, dummy_rnt_anchor)

dummy_tkey32_TDirectory = [
    0x00, 0x00, 0x00, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, WRITE_TIME_ary...,         0x00, 0x35,
    0x00, 0x01, 0x00, 0x00, 0x03, 0xEC, 0x00, 0x00, 0x00, 0x64, 0x00, 0x18, 0x74, 0x65, 0x73, 0x74,
    0x5F, 0x6E, 0x74, 0x75, 0x70, 0x6C, 0x65, 0x5F, 0x6D, 0x69, 0x6E, 0x69, 0x6D, 0x61, 0x6C, 0x2E,
    0x72, 0x6F, 0x6F, 0x74, 0x00,
]
test_io(UnROOT.Stubs.tkey32_TDirectory, dummy_tkey32_TDirectory)

dummy_tkey32_TStreamerInfo = [
    0x00, 0x00, 0x01, 0x94, 0x00, 0x04, 0x00, 0x00, 0x04, 0xF4, WRITE_TIME_ary...,         0x00, 0x40,
    0x00, 0x01, 0x00, 0x00, 0x04, 0x65, 0x00, 0x00, 0x00, 0x64, 0x05, 0x54, 0x4C, 0x69, 0x73, 0x74,
    0x0C, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x65, 0x72, 0x49, 0x6E, 0x66, 0x6F, 0x12, 0x44, 0x6F,
    0x75, 0x62, 0x6C, 0x79, 0x20, 0x6C, 0x69, 0x6E, 0x6B, 0x65, 0x64, 0x20, 0x6C, 0x69, 0x73, 0x74,
]
test_io(UnROOT.Stubs.tkey32_TStreamerInfo, dummy_tkey32_TStreamerInfo)



mytable = Dict("one_uint" => UInt32[0xcececece])
myio = IOBuffer()
UnROOT.write_rntuple(myio, mytable; rntuple_name="myntuple")
mio = take!(myio)
write("/tmp/mine.root", mio)
@test mio == REFERENCE_BYTES
end

@testset "RNTuple Writing - Single colunm round trips" begin
for _ = 1:10, T in [Float64, Float32, Float16, Int64, Int32, Int16, Int8, UInt64, UInt32, UInt16]
    newtable = Dict(randstring(rand(2:10)) => rand(T, rand(1:100)))
    newio = IOBuffer()
    UnROOT.write_rntuple(newio, newtable)
    nio = take!(newio)

    if isfile("a.root")
        rm("a.root")
    end

    open("a.root", "w") do f
        write(f, nio)
    end

    rntuple_name = "myntuple"
    t = LazyTree("a.root", rntuple_name)
    @test sort(names(t)) == sort(collect(keys(newtable)))
    @test only(columntable(t)) == only(columntable(newtable))

end
end

@testset "RNTuple Writing - Multiple colunm round trips" begin
    Ts = rand([Float64, Float32, Float16, Int64, Int32, Int16, Int8, UInt64, UInt32, UInt16], 15)
    Nitems = rand(10:1000)
    newtable = Dict(randstring(rand(2:10)) => rand(T, Nitems) for T in Ts)
    newio = IOBuffer()
    UnROOT.write_rntuple(newio, newtable)
    nio = take!(newio)

    if isfile("a.root")
        rm("a.root")
    end

    open("a.root", "w") do f
        write(f, nio)
    end

    rntuple_name = "myntuple"
    t = LazyTree("a.root", rntuple_name)
    @test sort(names(t)) == sort(collect(keys(newtable)))
    for i in propertynames(t)
        @test all(getproperty(t, i) .== newtable[String(i)])
    end
end
