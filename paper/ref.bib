@article{chep_2023,
	title = {High-performance end-user analysis in pure {Julia} programming language},
	volume = {295},
	copyright = {© The Authors, published by EDP Sciences, 2024},
	issn = {2100-014X},
	url = {https://www.epj-conferences.org/articles/epjconf/abs/2024/05/epjconf_chep2024_06012/epjconf_chep2024_06012.html},
	doi = {10.1051/epjconf/202429506012},
	abstract = {We present tools for high-performance analysis written in pure Julia, a just-in-time (JIT) compiled dynamic programming language with a high-level syntax and performance. The packages we present center around UnROOT.jl, a pure Julia ROOT file I/O package that is optimized for speed, lazy reading, flexibility and thread safety.We discuss what affects performance in Julia, the challenges, and their solutions during the development of UnROOT.jl. We highlight type stability as a challenge and discuss its implication whenever any “compilation” happens (incl. Numba, Jax, C++) as well as Julia’s specific ones.We demonstrate the performance and “easy to use” claim by comparing UnROOT.jl against popular alternatives (RDataFrame, Uproot, etc.) in medium-size realistic benchmarks, comparing both performance and code complexity.Finally, we also showcase real ATLAS analysis workflows both locally and on an HPC system, highlighting the composability of UnROOT.jl with multithread/process and out-of-core distributed computing libraries.},
	language = {en},
	urldate = {2024-11-05},
	journal = {EPJ Web of Conferences},
	author = {Ling, Jerry and Gál, Tamás},
	year = {2024},
	note = {Publisher: EDP Sciences},
	pages = {06012},
	file = {Full Text PDF:/home/akako/Zotero/storage/FYM79QE4/Ling and Gál - 2024 - High-performance end-user analysis in pure Julia programming language.pdf:application/pdf},
}

@article{juliahep_whitepaper,
	title = {Potential of the {Julia} {Programming} {Language} for {High} {Energy} {Physics} {Computing}},
	volume = {7},
	issn = {2510-2044},
	url = {https://doi.org/10.1007/s41781-023-00104-x},
	doi = {10.1007/s41781-023-00104-x},
	abstract = {Research in high energy physics (HEP) requires huge amounts of computing and storage, putting strong constraints on the code speed and resource usage. To meet these requirements, a compiled high-performance language is typically used; while for physicists, who focus on the application when developing the code, better research productivity pleads for a high-level programming language. A popular approach consists of combining Python, used for the high-level interface, and C++, used for the computing intensive part of the code. A more convenient and efficient approach would be to use a language that provides both high-level programming and high-performance. The Julia programming language, developed at MIT especially to allow the use of a single language in research activities, has followed this path. In this paper the applicability of using the Julia language for HEP research is explored, covering the different aspects that are important for HEP code development: runtime performance, handling of large projects, interface with legacy code, distributed computing, training, and ease of programming. The study shows that the HEP community would benefit from a large scale adoption of this programming language. The HEP-specific foundation libraries that would need to be consolidated are identified.},
	language = {en},
	number = {1},
	urldate = {2024-11-05},
	journal = {Computing and Software for Big Science},
	author = {JuliaHEP authors},
	month = oct,
	year = {2023},
	keywords = {HEP, High energy and nuclear physics, HPC, Julia, Programming language, Python},
	pages = {10},
	file = {Full Text PDF:/home/akako/Zotero/storage/A8LZ43YV/Eschle et al. - 2023 - Potential of the Julia Programming Language for High Energy Physics Computing.pdf:application/pdf},
}
@article{unroot_2022, doi = {10.21105/joss.04452}, url = {https://doi.org/10.21105/joss.04452}, year = {2022}, publisher = {The Open Journal}, volume = {7}, number = {76}, pages = {4452}, author = {Tamás Gál and Jerry (Jiahong) Ling and Nick Amin}, title = {UnROOT: an I/O library for the CERN ROOT file format written in Julia}, journal = {Journal of Open Source Software} } 

@misc{rntuple_2023,
	title = {{RNTuple} performance: {Status} and {Outlook}},
	shorttitle = {{RNTuple} performance},
	url = {http://arxiv.org/abs/2204.09043},
	doi = {10.48550/arXiv.2204.09043},
	abstract = {Upcoming HEP experiments, e.g. at the HL-LHC, are expected to increase the volume of generated data by at least one order of magnitude. In order to retain the ability to analyze the influx of data, full exploitation of modern storage hardware and systems, such as low-latency high-bandwidth NVMe devices and distributed object stores, becomes critical. To this end, the ROOT RNTuple I/O subsystem has been designed to address performance bottlenecks and shortcomings of ROOT's current state of the art TTree I/O subsystem. RNTuple provides a backwards-incompatible redesign of the TTree binary format and access API that evolves the ROOT event data I/O for the challenges of the upcoming decades. It focuses on a compact data format, on performance engineering for modern storage hardware, for instance through making parallel and asynchronous I/O calls by default, and on robust interfaces that are easy to use correctly. In this contribution, we evaluate the RNTuple performance for typical HEP analysis tasks. We compare the throughput delivered by RNTuple to popular I/O libraries outside HEP, such as HDF5 and Apache Parquet. We demonstrate the advantages of RNTuple for HEP analysis workflows and provide an outlook on the road to its use in production.},
	urldate = {2024-11-05},
	publisher = {arXiv},
	author = {Lopez-Gomez, Javier and Blomer, Jakob},
	month = mar,
	year = {2023},
	note = {arXiv:2204.09043},
	keywords = {Computer Science - Databases, Physics - Accelerator Physics, Physics - Computational Physics, Physics - Data Analysis, Statistics and Probability},
	file = {Preprint PDF:/home/akako/Zotero/storage/2NCAUWLV/Lopez-Gomez and Blomer - 2023 - RNTuple performance Status and Outlook.pdf:application/pdf},
}

@article{bezanson2017julia,
  title={Julia: A fresh approach to numerical computing},
  author={Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B},
  doi={10.1137/141000671},
  journal={SIAM review},
  volume={59},
  number={1},
  pages={65--98},
  year={2017},
  publisher={SIAM}
}

@article{Moore1990,
	author = {Moore, James T. and Bard, Jonathan F.},
	doi = {10.1287/opre.38.5.911},
	issn = {0030-364X},
	journal = {Operations Research},
	keywords = {games: noncooperative,integer: branch-and-bound algorithms,programming},
	mendeley-groups = {bilevel - hierarchical},
	month = {oct},
	number = {5},
	pages = {911--921},
	publisher = { INFORMS },
	title = {{The Mixed Integer Linear Bilevel Programming Problem}},
	url = {http://pubsonline.informs.org/doi/abs/10.1287/opre.38.5.911},
	volume = {38},
	year = {1990}
}
