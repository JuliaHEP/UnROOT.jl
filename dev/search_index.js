var documenterSearchIndex = {"docs":
[{"location":"#UnROOT.jl-1","page":"Introduction","title":"UnROOT.jl","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Yep.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Modules = [UnROOT]","category":"page"},{"location":"#UnROOT.array-Tuple{ROOTFile,Any}","page":"Introduction","title":"UnROOT.array","text":"function array(f::ROOTFile, path)\n\nReads an array from a branch. Currently hardcoded to Int32\n\n\n\n\n\n","category":"method"},{"location":"#UnROOT.Preamble-Union{Tuple{T}, Tuple{Any,Type{T}}} where T","page":"Introduction","title":"UnROOT.Preamble","text":"Reads the preamble of an object.\n\nThe cursor will be put into the right place depending on the data.\n\n\n\n\n\n","category":"method"},{"location":"#UnROOT.Streamers-Tuple{Any}","page":"Introduction","title":"UnROOT.Streamers","text":"function Streamers(io)\n\nReads all the streamers from the ROOT source.\n\n\n\n\n\n","category":"method"},{"location":"#UnROOT.endcheck-Union{Tuple{T}, Tuple{Any,T}} where T<:UnROOT.Preamble","page":"Introduction","title":"UnROOT.endcheck","text":"function endcheck(io, preamble::Preamble)\n\nChecks if everything went well after parsing a TOBject. Used in conjuction with Preamble.\n\n\n\n\n\n","category":"method"},{"location":"#UnROOT.readbytes!-NTuple{4,Any}","page":"Introduction","title":"UnROOT.readbytes!","text":"function readbytes!(io, b, offset, nr)\n\nEfficient read of bytes into an existing array at a given offset\n\n\n\n\n\n","category":"method"},{"location":"#UnROOT.readobjany!-Tuple{Any,Union{UnROOT.TKey32, UnROOT.TKey64},Any}","page":"Introduction","title":"UnROOT.readobjany!","text":"function readobjany!(io, tkey::TKey, refs)\n\nThe main entrypoint where streamers are parsed and cached for later use. The refs dictionary holds the streamers or parsed data which are reused when already available.\n\n\n\n\n\n","category":"method"},{"location":"#UnROOT.skiptobj-Tuple{Any}","page":"Introduction","title":"UnROOT.skiptobj","text":"function skiptobj(io)\n\nSkips a TOBject.\n\n\n\n\n\n","category":"method"},{"location":"#UnROOT.topological_sort-Tuple{Any}","page":"Introduction","title":"UnROOT.topological_sort","text":"function topological_sort(streamer_infos)\n\nSort the streamers with respect to their dependencies and keep only those which are not defined already.\n\nThe implementation is based on https://stackoverflow.com/a/11564769/1623645\n\n\n\n\n\n","category":"method"},{"location":"#UnROOT.@stack-Tuple{Any,Vararg{Any,N} where N}","page":"Introduction","title":"UnROOT.@stack","text":"macro stack(into, structs...)\n\nStack the fields of multiple structs and create a new one. The first argument is the name of the new struct followed by the ones to be stacked. Parametric types are not supported and the fieldnames needs to be unique.\n\nExample:\n\n@stack Baz Foo Bar\n\nCreates Baz with the concatenated fields of Foo and Bar\n\n\n\n\n\n","category":"macro"}]
}
